apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: trello-groomer-config-volume
  labels:
    directory: config
spec:
  capacity:
    storage: 5Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    # NOTE: this directory must exist
    path: /home/picocluster/Volumes/trello-groomer-config
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              - pc2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trello-groomer-config-claim
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Mi
  selector:
    matchLabels:
      directory: config
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: trello-groomer-cache-volume
  labels:
    directory: cache
spec:
  capacity:
    storage: 5Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    # NOTE: this directory must exist
    path: /home/picocluster/Volumes/trello-groomer-cache
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              - pc2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trello-groomer-cache-claim
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Mi
  selector:
    matchLabels:
      directory: cache
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: trello-groomer-log-volume
  labels:
    directory: log
spec:
  capacity:
    storage: 5Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    # NOTE: this directory must exist
    path: /home/picocluster/Volumes/trello-groomer-log
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
              - pc2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trello-groomer-log-claim
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Mi
  selector:
    matchLabels:
      directory: log


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trello-groomer-todo
  labels:
    app: trello-groomer-todo
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: trello-groomer-todo
  template:
    metadata:
      labels:
        app: trello-groomer-todo
        name: trello-groomer-todo
    spec:
      containers:
        - name: trello-groomer-todo
          image: sthinds/trello-groomer:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: trello-groomer-config-volume
              mountPath: /usr/src/app/config
            - name: trello-groomer-cache-volume
              mountPath: /usr/src/app/cache
            - name: trello-groomer-log-volume
              mountPath: /usr/src/app/log
            - name: trello-groomer-timezone
              mountPath: /etc/localtime
            - name: trello-groomer-ssl
              mountPath: /etc/ssl/certs
          env:
            - name: WHICH_GROOMER
              value: "start-todo-groomer"
      volumes:
        - name: trello-groomer-config-volume
          persistentVolumeClaim:
            claimName: trello-groomer-config-claim
        - name: trello-groomer-cache-volume
          persistentVolumeClaim:
            claimName: trello-groomer-cache-claim
        - name: trello-groomer-log-volume
          persistentVolumeClaim:
            claimName: trello-groomer-log-claim
        - name: trello-groomer-timezone
          hostPath:
            path: /usr/share/zoneinfo/America/Chicago
        - name: trello-groomer-ssl
          hostPath:
            path: /etc/ssl/certs/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trello-groomer-work
  labels:
    app: trello-groomer-work
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: trello-groomer-work
  template:
    metadata:
      labels:
        app: trello-groomer-work
        name: trello-groomer-work
    spec:
      containers:
        - name: trello-groomer-work
          image: sthinds/trello-groomer:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: trello-groomer-config-volume
              mountPath: /usr/src/app/config
            - name: trello-groomer-cache-volume
              mountPath: /usr/src/app/cache
            - name: trello-groomer-log-volume
              mountPath: /usr/src/app/log
            - name: trello-groomer-timezone
              mountPath: /etc/localtime
            - name: trello-groomer-ssl
              mountPath: /etc/ssl/certs
          env:
            - name: WHICH_GROOMER
              value: "start-work-groomer"
      volumes:
        - name: trello-groomer-config-volume
          persistentVolumeClaim:
            claimName: trello-groomer-config-claim
        - name: trello-groomer-cache-volume
          persistentVolumeClaim:
            claimName: trello-groomer-cache-claim
        - name: trello-groomer-log-volume
          persistentVolumeClaim:
            claimName: trello-groomer-log-claim
        - name: trello-groomer-timezone
          hostPath:
            path: /usr/share/zoneinfo/America/Chicago
        - name: trello-groomer-ssl
          hostPath:
            path: /etc/ssl/certs/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trello-groomer-media
  labels:
    app: trello-groomer-media
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: trello-groomer-media
  template:
    metadata:
      labels:
        app: trello-groomer-media
        name: trello-groomer-media
    spec:
      containers:
        - name: trello-groomer-media
          image: sthinds/trello-groomer:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: trello-groomer-config-volume
              mountPath: /usr/src/app/config
            - name: trello-groomer-cache-volume
              mountPath: /usr/src/app/cache
            - name: trello-groomer-log-volume
              mountPath: /usr/src/app/log
            - name: trello-groomer-timezone
              mountPath: /etc/localtime
            - name: trello-groomer-ssl
              mountPath: /etc/ssl/certs
          env:
            - name: WHICH_GROOMER
              value: "start-media-groomer"
      volumes:
        - name: trello-groomer-config-volume
          persistentVolumeClaim:
            claimName: trello-groomer-config-claim
        - name: trello-groomer-cache-volume
          persistentVolumeClaim:
            claimName: trello-groomer-cache-claim
        - name: trello-groomer-log-volume
          persistentVolumeClaim:
            claimName: trello-groomer-log-claim
        - name: trello-groomer-timezone
          hostPath:
            path: /usr/share/zoneinfo/America/Chicago
        - name: trello-groomer-ssl
          hostPath:
            path: /etc/ssl/certs/
# TODO: get this working?
# ---
# apiVersion: batch/v1beta1
# kind: CronJob
# metadata:
#   name: restart-trello-groomers
# spec:
#   concurrencyPolicy: Forbid
#   schedule: '0 0 * * 0' # Run once a week at midnight on Sunday morning
#   jobTemplate:
#     spec:
#       backoffLimit: 2
#       activeDeadlineSeconds: 600
#       template:
#         spec:
#           restartPolicy: Never